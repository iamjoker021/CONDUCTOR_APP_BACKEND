openapi: 3.0.0
info:
  version: 1.0.0
  title: User API
  description: API documentation for user functionalities

servers:
  - url: ${HOST_SERVER_URL}
  - url: http://localhost:3000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Ticket:
      type: object
      properties:
        ticket_id:
          type: integer
        ticket_unique_identifier:
          type: string
        ticket_qr:
          type: string
        issue_time:
          type: string
          format: date-time
        expiry_time:
          type: string
          format: date-time
        trip_details:
          type: object
          properties:
            bus_id:
              type: integer
            source_stop_id:
              type: integer
            destination_stop_id:
              type: integer
            total_distance:
              type: number
            price_per_km:
              type: number
            no_of_passengers:
              type: integer
            fare:
              type: number
        is_valid:
          type: boolean
        user_id:
          type: integer

paths:
  /user/tickets:
    get:
      summary: Get ticket details for a user
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: isvalid
          schema:
            type: integer
          required: false
          description: Whether to fetch only valid tickets (1 for true, 0 for false)
      responses:
        '200':
          description: Successful response with ticket details
          content:
            application/json:
              schema:
                type: object
                properties:
                  ticketList:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized, JWT token missing or invalid
        '500':
          description: Server error

  /user/pay-for-trip:
    post:
      summary: Pay for a Trip
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sourceId:
                  type: integer
                  description: ID of the source stop.
                  example: 1
                destinationId:
                  type: integer
                  description: ID of the destination stop.
                  example: 2
                busId:
                  type: integer
                  description: ID of the bus.
                  example: 3
                noOfPassengers:
                  type: integer
                  description: Number of passengers.
                  example: 4
      responses:
        '200':
          description: Fare calculation successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Proceed to pay
                  tripInfo:
                    type: object
                    properties:
                      bus_id:
                        type: integer
                        example: 3
                      price_per_km:
                        type: integer
                        example: 10
                      total_distance:
                        type: integer
                        example: 15
                      fare:
                        type: integer
                        example: 150
                  noOfPassenger:
                    type: integer
                    example: 4
                  totalFare:
                    type: integer
                    example: 600
        '404':
          description: Invalid trip details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Invalid Trip Details, not able to generate ticket
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Unable to Pay Trip
                  error:
                    type: string
                    example: Internal Server Error

  /user/tickets/{ticketid}:
    post:
      summary: Validate Ticket by ID
      description: Validates a bus ticket using its unique identifier. Only users with the role 'conductor' are allowed to validate tickets.
      tags:
        - Conductor
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: ticketid
          required: true
          description: The unique identifier of the ticket to be validated.
          schema:
            type: string
      responses:
        '200':
          description: Ticket successfully validated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Ticket is marked as validated
        '400':
          description: Ticket not found or invalid ticket ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Ticket is not found
                  message:
                    type: string
                    example: The ticket ID is not present in DB, are you sure the Ticket ID is correct. The ticket ID is case-sensitive, make sure the case and spelling is correct.
        '401':
          description: Unauthorized access. Only conductors can validate tickets.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Only Conductor can validate a ticket
                  message:
                    type: string
                    example: The given token/user is not valid to validate the ticket.
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unable to fetch ticket details
                  message:
                    type: string
                    example: Error details
